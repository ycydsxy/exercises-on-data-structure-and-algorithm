package sxy.algorithm.nowcoder.advanced.chapter05;

/**
 * 01排列问题
 * 
 * 给你一个数N，代表一个二进制数有N位，人为规定出现0的地方左边一位必须是1，问合法的二进制数有多少种.（0和000是一个数）
 * 
 * 思路：如果暴力解的话，时间复杂度是O(2^N).但是人为规定0的左边必须是1，则可以化简到O(log(N)).设F(N)代表N位的时候的合法二进制数的种数
 * ，则其最高位肯定是1。其次高位可以是0或者是1，若次高位是0时，其次次高位必定是1.故F(N)=F(N-1)+F(N-2).斐波拉契数列的解，
 * 用矩阵乘法做能够做到O(log(N)).
 * 
 * @author Kevin
 * 
 */
public class OneNumber {

}
