package sxy.algorithm.nowcoder.bigdata;

/**
 * 设计一个UUID系统，使得满足大吞吐量且每个ID概率上就不会重复
 * 
 * 思路：
 * 
 * 1.可以用每个服务器的专属信息作前缀，依次累加，每个服务器单独分发。缺点在于机器坏了一段时间重新上线如何得知原来累加到哪儿了。
 * 
 * 2.可以做强同步，每个服务器都有一个共同的源。缺点在于中心节点的吞吐量太大。
 * 
 * 3.1台机器作为主机，加一个从机，然后层层分级。上层的机器只用base和range来确定分发下去的UUID的范围，最下层按照上层给的范围进行ID的分发。
 * 如果下层的机器发现范围不够用后，可以找上层机器申请，如果申请太过频繁，则上层机器可以增大range。上层机器存储的量少，而且基本没有什么压力，故
 * 而容灾等较好做 。下层的机器如果挂掉，直接上线找对应上级新申请就完了。
 * 
 * @author Kevin
 * 
 */
public class UUID {

}
