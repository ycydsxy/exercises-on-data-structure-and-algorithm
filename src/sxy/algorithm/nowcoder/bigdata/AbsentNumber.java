package sxy.algorithm.nowcoder.bigdata;

/**
 * 40亿个非负整数中，找到没出现过的数
 * 
 * 要求：
 * 
 * 1.找到所有没出现过的数，并打印，内存限制为1GB.
 * 
 * 2.找到其中某一个没出现的数，并打印，内存限制为10MB.
 * 
 * 3.找到其中某一个没出现的数，并打印，内存限制为1KB.
 * 
 * 4.找到其中某一个没出现的数，并打印，只用有限几个变量.
 * 
 * 思路：无符号整型的范围是0~2^32-1，约为0~42亿
 * 
 * 1.不能用哈希表，全建哈希表会产生40亿*4B=16GB内存.使用BitMap做，建立一个42亿bit的数组，内存占用为42亿b/8=0.5GB，
 * 出现则置1.使用int[]或long[]拼成bit类型的数组.
 * 
 * 2.一千万个数是一组，从零到42亿共4200组。准备一个长度为4200的整型数组，来记录每组里的数有多少个，空间占用为4200*4B=16.8KB。
 * 这不同组中至少有一个组里的数不满1000万，再使用BitMap在这个组里 精细地统计，空间占用为1000万b/8=1.25MB.
 * 
 * 3.最后的BitMap是瓶颈，故而前面先用大桶分出大致范围，再用小桶进行精确的分析，最后用BitMap进行查找.
 * 
 * 4.二分法，只不过桶只有2个而已，一直向下进行查找即可。
 * 
 * @author Kevin
 * 
 */
public class AbsentNumber {

}
